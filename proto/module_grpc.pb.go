// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: module.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Module_ValidateAndSetConfig_FullMethodName = "/proto.Module/ValidateAndSetConfig"
	Module_Init_FullMethodName                 = "/proto.Module/Init"
	Module_Enable_FullMethodName               = "/proto.Module/Enable"
	Module_Disable_FullMethodName              = "/proto.Module/Disable"
	Module_GetInfo_FullMethodName              = "/proto.Module/GetInfo"
	Module_CallModule_FullMethodName           = "/proto.Module/CallModule"
)

// ModuleClient is the client API for Module service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleClient interface {
	ValidateAndSetConfig(ctx context.Context, in *ConfigBody, opts ...grpc.CallOption) (*Response, error)
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*Empty, error)
	Enable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Disable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoResponse, error)
	CallModule(ctx context.Context, in *RequestModule, opts ...grpc.CallOption) (*Response, error)
}

type moduleClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleClient(cc grpc.ClientConnInterface) ModuleClient {
	return &moduleClient{cc}
}

func (c *moduleClient) ValidateAndSetConfig(ctx context.Context, in *ConfigBody, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Module_ValidateAndSetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Module_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Enable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Module_Enable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) Disable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Module_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, Module_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleClient) CallModule(ctx context.Context, in *RequestModule, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Module_CallModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServer is the server API for Module service.
// All implementations should embed UnimplementedModuleServer
// for forward compatibility
type ModuleServer interface {
	ValidateAndSetConfig(context.Context, *ConfigBody) (*Response, error)
	Init(context.Context, *InitRequest) (*Empty, error)
	Enable(context.Context, *Empty) (*Empty, error)
	Disable(context.Context, *Empty) (*Empty, error)
	GetInfo(context.Context, *Empty) (*InfoResponse, error)
	CallModule(context.Context, *RequestModule) (*Response, error)
}

// UnimplementedModuleServer should be embedded to have forward compatible implementations.
type UnimplementedModuleServer struct {
}

func (UnimplementedModuleServer) ValidateAndSetConfig(context.Context, *ConfigBody) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAndSetConfig not implemented")
}
func (UnimplementedModuleServer) Init(context.Context, *InitRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedModuleServer) Enable(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedModuleServer) Disable(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedModuleServer) GetInfo(context.Context, *Empty) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedModuleServer) CallModule(context.Context, *RequestModule) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallModule not implemented")
}

// UnsafeModuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServer will
// result in compilation errors.
type UnsafeModuleServer interface {
	mustEmbedUnimplementedModuleServer()
}

func RegisterModuleServer(s grpc.ServiceRegistrar, srv ModuleServer) {
	s.RegisterService(&Module_ServiceDesc, srv)
}

func _Module_ValidateAndSetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).ValidateAndSetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_ValidateAndSetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).ValidateAndSetConfig(ctx, req.(*ConfigBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Enable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).Disable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Module_CallModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServer).CallModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Module_CallModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServer).CallModule(ctx, req.(*RequestModule))
	}
	return interceptor(ctx, in, info, handler)
}

// Module_ServiceDesc is the grpc.ServiceDesc for Module service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Module_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Module",
	HandlerType: (*ModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateAndSetConfig",
			Handler:    _Module_ValidateAndSetConfig_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _Module_Init_Handler,
		},
		{
			MethodName: "Enable",
			Handler:    _Module_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _Module_Disable_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Module_GetInfo_Handler,
		},
		{
			MethodName: "CallModule",
			Handler:    _Module_CallModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module.proto",
}

const (
	DBHelper_CallDBHelper_FullMethodName = "/proto.DBHelper/CallDBHelper"
)

// DBHelperClient is the client API for DBHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBHelperClient interface {
	CallDBHelper(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type dBHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewDBHelperClient(cc grpc.ClientConnInterface) DBHelperClient {
	return &dBHelperClient{cc}
}

func (c *dBHelperClient) CallDBHelper(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DBHelper_CallDBHelper_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBHelperServer is the server API for DBHelper service.
// All implementations should embed UnimplementedDBHelperServer
// for forward compatibility
type DBHelperServer interface {
	CallDBHelper(context.Context, *Request) (*Response, error)
}

// UnimplementedDBHelperServer should be embedded to have forward compatible implementations.
type UnimplementedDBHelperServer struct {
}

func (UnimplementedDBHelperServer) CallDBHelper(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallDBHelper not implemented")
}

// UnsafeDBHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBHelperServer will
// result in compilation errors.
type UnsafeDBHelperServer interface {
	mustEmbedUnimplementedDBHelperServer()
}

func RegisterDBHelperServer(s grpc.ServiceRegistrar, srv DBHelperServer) {
	s.RegisterService(&DBHelper_ServiceDesc, srv)
}

func _DBHelper_CallDBHelper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBHelperServer).CallDBHelper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBHelper_CallDBHelper_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBHelperServer).CallDBHelper(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DBHelper_ServiceDesc is the grpc.ServiceDesc for DBHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DBHelper",
	HandlerType: (*DBHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallDBHelper",
			Handler:    _DBHelper_CallDBHelper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module.proto",
}
